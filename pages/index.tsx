import type { NextPage } from 'next'
import useSWR, {Fetcher, mutate} from 'swr'
import Head from 'next/head'
import Image from 'next/image'
import Table from '../components/Table'
import styles from '../styles/Home.module.css'
import { TechConceptsEntity } from './api/data'
import { ChangeEvent, FormEvent, useState } from 'react'

const fetcher = (url: string) => fetch(`${url}`).then(res => res.json())

const Home: NextPage = () => {
  const [queryParams, setQueryParams] = useState('')
  const { data, mutate } = useSWR<TechConceptsEntity[]>(`/api/data?application=${queryParams}`, fetcher)
  const { data: conceptSelect } = useSWR<string[]>('/api/techConcepts', fetcher)
  const [techConceptSelect, setTechConceptSelect] = useState('')
  const [searchTerm, setSearchTerm] = useState('')

  const submitSearch = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    let param = `${searchTerm}`
    if (techConceptSelect) {
      param = `${searchTerm}&concept=${techConceptSelect}`
    }
    setQueryParams(param)
  }

  const changeSearch = (e: ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value)
  }

  const changeTechSelect = (e: ChangeEvent<HTMLSelectElement>) => {
    setTechConceptSelect(e.target.value)
  }

  const resetSearch = () => {
    setQueryParams('')
    setSearchTerm('')
    setTechConceptSelect('')
  }

  if (!data) return (<div>Loading</div>)
  return (
    <div className={styles.container}>
      <Head>
        <title>Benjamin Trounson - BCIS303 Tech Solutions Tool</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className='d-flex flex-column justify-content-center pt-4'>
        <div className='border pt-2'>
          <form className='container' onSubmit={e => submitSearch(e)}>
            <div className='row'>
              <div className='col'>
                <label className='form-label' htmlFor="techConceptSelect">Tech Concept</label>
                <select className='form-select' name="" id="techConceptSelect" value={techConceptSelect} onChange={e => changeTechSelect(e)}>
                  <option value={""}>All</option>
                  {conceptSelect?.map((concept: string, index) => {
                    return (<option key={index} value={concept}>{concept}</option>)
                  })}
                </select>
              </div>
              <div className='col'>
                <label className='form-label' htmlFor="searchInput">Potential Application Search</label>
                <input className='form-control' type="text" id='searchInput' onChange={e => changeSearch(e)}/>
              </div>
            </div>
            <div className='row py-3'>
              <div className='d-flex flex-row-reverse'>
                <button type="submit" className='btn btn-primary mx-2'>Submit</button>
                <button type="reset" className='btn btn-warning' onClick={resetSearch}>Reset</button>
              </div>
            </div>
          </form>
        </div>
        <Table data={data} />
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Home
